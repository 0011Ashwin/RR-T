import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { useHODAuth } from '@/hooks/use-hod-auth';
import { Resource, WeeklyTimeSlot, BookingRequest, ClassSession, Course, DEFAULT_TIME_SLOTS } from '../../shared/resource-types';
import { 
  Building2, 
  Calendar, 
  Clock, 
  Users, 
  Send, 
  Filter,
  MapPin,
  CheckCircle,
  XCircle,
  AlertCircle,
  Plus,
  Edit,
  Trash2,
  Save,
  AlertTriangle,
  Globe,
  Wand2
} from 'lucide-react';

const DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

// Sample data for university resources
const SAMPLE_SHARED_RESOURCES: Resource[] = [
  {
    id: 'shared_1',
    name: 'Main Auditorium',
    type: 'seminar_hall',
    capacity: 500,
    department: 'University',
    location: 'Ground Floor, Main Building',
    facilities: ['Projector', 'Audio System', 'AC', 'Stage'],
    isShared: true,
    isActive: true,
    createdAt: '2024-01-01',
    updatedAt: '2024-01-01',
  },
  {
    id: 'shared_2',
    name: 'Conference Hall A',
    type: 'conference_room',
    capacity: 50,
    department: 'University',
    location: 'First Floor, Admin Building',
    facilities: ['Video Conferencing', 'Smart Board', 'AC'],
    isShared: true,
    isActive: true,
    createdAt: '2024-01-01',
    updatedAt: '2024-01-01',
  },
  {
    id: 'shared_3',
    name: 'Computer Lab - Central',
    type: 'lab',
    capacity: 60,
    department: 'University',
    location: 'Second Floor, IT Building',
    facilities: ['60 Computers', 'Projector', 'Internet', 'AC'],
    isShared: true,
    isActive: true,
    createdAt: '2024-01-01',
    updatedAt: '2024-01-01',
  },
  {
    id: 'shared_4',
    name: 'Seminar Hall B',
    type: 'seminar_hall',
    capacity: 100,
    department: 'University',
    location: 'Third Floor, Academic Block',
    facilities: ['Projector', 'Audio System', 'AC'],
    isShared: true,
    isActive: true,
    createdAt: '2024-01-01',
    updatedAt: '2024-01-01',
  },
];

export default function Resources() {
  const { currentHOD } = useHODAuth();
  const [selectedDay, setSelectedDay] = useState(1); // Monday
  const [departmentResources, setDepartmentResources] = useState<Resource[]>([]);
  const [universityResources, setUniversityResources] = useState<Resource[]>([]);
  const [departmentSlots, setDepartmentSlots] = useState<WeeklyTimeSlot[]>([]);
  const [universitySlots, setUniversitySlots] = useState<WeeklyTimeSlot[]>([]);
  const [classSessions, setClassSessions] = useState<ClassSession[]>([]);
  const [courses, setCourses] = useState<Course[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchResources = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // Fetch department resources
        const deptResponse = await fetch(`/api/resources/department/${currentHOD?.department}`);
        if (!deptResponse.ok) throw new Error('Failed to fetch department resources');
        const deptData = await deptResponse.json();
        setDepartmentResources(deptData);

        // Fetch university resources
        const uniResponse = await fetch('/api/resources/type/shared');
        if (!uniResponse.ok) throw new Error('Failed to fetch university resources');
        const uniData = await uniResponse.json();
        setUniversityResources(uniData);

        // Fetch time slots and other data
        const slotsResponse = await fetch('/api/timeslots');
        if (!slotsResponse.ok) throw new Error('Failed to fetch time slots');
        const slotsData = await slotsResponse.json();
        setDepartmentSlots(slotsData.departmentSlots);
        setUniversitySlots(slotsData.universitySlots);

        // Fetch class sessions
        const sessionsResponse = await fetch(`/api/class-sessions/department/${currentHOD?.department}`);
        if (!sessionsResponse.ok) throw new Error('Failed to fetch class sessions');
        const sessionsData = await sessionsResponse.json();
        setClassSessions(sessionsData);

        // Fetch courses
        const coursesResponse = await fetch(`/api/courses/department/${currentHOD?.department}`);
        if (!coursesResponse.ok) throw new Error('Failed to fetch courses');
        const coursesData = await coursesResponse.json();
        setCourses(coursesData);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'An error occurred');
        console.error('Error fetching resources:', err);
      } finally {
        setLoading(false);
      }
    };

    if (currentHOD?.department) {
      fetchResources();
    }
  }, [currentHOD?.department]);
  const [bookingRequests, setBookingRequests] = useState<BookingRequest[]>([]);
  const [bookingDialogOpen, setBookingDialogOpen] = useState(false);
  const [allocationDialogOpen, setAllocationDialogOpen] = useState(false);
  const [selectedResourceForBooking, setSelectedResourceForBooking] = useState<Resource | null>(null);
  const [selectedSlotForAllocation, setSelectedSlotForAllocation] = useState<{
    resourceId: string;
    timeSlotId: string;
    dayOfWeek: number;
  } | null>(null);
  const [conflicts, setConflicts] = useState<string[]>([]);

  const [bookingForm, setBookingForm] = useState({
    timeSlotId: '',
    courseName: '',
    purpose: '',
    expectedAttendance: '',
  });

  const [allocationForm, setAllocationForm] = useState({
    courseId: '',
    faculty: '',
    type: 'theory' as 'theory' | 'practical' | 'tutorial' | 'seminar',
  });

  // Initialize data based on current HOD
  useEffect(() => {
    if (!currentHOD) return;

    // Generate department resources based on HOD's department
    const deptResources: Resource[] = 
      currentHOD.department === 'Geography' ? [
        {
          id: 'geo_1',
          name: 'Geography Lab',
          type: 'lab',
          capacity: 40,
          department: 'Geography',
          location: 'Ground Floor, Geography Building',
          facilities: ['Maps', 'Globes', 'Survey Equipment', 'Projector'],
          isShared: false,
          isActive: true,
          createdAt: '2024-01-01',
          updatedAt: '2024-01-01',
        },
        {
          id: 'geo_2',
          name: 'Lecture Hall - Geography',
          type: 'classroom',
          capacity: 80,
          department: 'Geography',
          location: 'First Floor, Geography Building',
          facilities: ['Projector', 'Smart Board', 'AC'],
          isShared: false,
          isActive: true,
          createdAt: '2024-01-01',
          updatedAt: '2024-01-01',
        },
        {
          id: 'geo_3',
          name: 'Seminar Room - Geography',
          type: 'seminar_hall',
          capacity: 30,
          department: 'Geography',
          location: 'Second Floor, Geography Building',
          facilities: ['Projector', 'Whiteboard'],
          isShared: false,
          isActive: true,
          createdAt: '2024-01-01',
          updatedAt: '2024-01-01',
        },
      ] : [
        {
          id: 'biz_1',
          name: 'Business Lab',
          type: 'lab',
          capacity: 50,
          department: 'Business Management',
          location: 'Ground Floor, Business Building',
          facilities: ['Computers', 'Projector', 'Internet', 'Presentation Tools'],
          isShared: false,
          isActive: true,
          createdAt: '2024-01-01',
          updatedAt: '2024-01-01',
        },
        {
          id: 'biz_2',
          name: 'Lecture Hall - Business',
          type: 'classroom',
          capacity: 100,
          department: 'Business Management',
          location: 'First Floor, Business Building',
          facilities: ['Projector', 'Smart Board', 'AC', 'Audio System'],
          isShared: false,
          isActive: true,
          createdAt: '2024-01-01',
          updatedAt: '2024-01-01',
        },
        {
          id: 'biz_3',
          name: 'Conference Room - Business',
          type: 'conference_room',
          capacity: 25,
          department: 'Business Management',
          location: 'Second Floor, Business Building',
          facilities: ['Video Conferencing', 'Projector', 'Whiteboard'],
          isShared: false,
          isActive: true,
          createdAt: '2024-01-01',
          updatedAt: '2024-01-01',
        },
      ];

    setDepartmentResources(deptResources);

    // Generate sample courses
    const deptCourses: Course[] = 
      currentHOD.department === 'Geography' ? [
        {
          id: 'geo_course_1',
          name: 'Physical Geography',
          code: 'GEO101',
          department: 'Geography',
          semester: 1,
          section: 'A',
          faculty: 'Dr. Kumar Singh',
          weeklyHours: 4,
          expectedSize: 35,
          type: 'theory',
          isActive: true,
        },
        {
          id: 'geo_course_2',
          name: 'Human Geography',
          code: 'GEO102',
          department: 'Geography',
          semester: 1,
          section: 'A',
          faculty: 'Prof. Sharma',
          weeklyHours: 3,
          expectedSize: 35,
          type: 'theory',
          isActive: true,
        },
        {
          id: 'geo_course_3',
          name: 'Cartography Lab',
          code: 'GEO103',
          department: 'Geography',
          semester: 2,
          section: 'A',
          faculty: 'Dr. Verma',
          weeklyHours: 2,
          expectedSize: 20,
          type: 'practical',
          isActive: true,
        },
      ] : [
        {
          id: 'biz_course_1',
          name: 'Business Management',
          code: 'BIZ101',
          department: 'Business Management',
          semester: 1,
          section: 'A',
          faculty: 'Dr. Priya Sharma',
          weeklyHours: 4,
          expectedSize: 45,
          type: 'theory',
          isActive: true,
        },
        {
          id: 'biz_course_2',
          name: 'Marketing Management',
          code: 'BIZ201',
          department: 'Business Management',
          semester: 2,
          section: 'A',
          faculty: 'Prof. Agarwal',
          weeklyHours: 3,
          expectedSize: 40,
          type: 'theory',
          isActive: true,
        },
        {
          id: 'biz_course_3',
          name: 'Business Analytics Lab',
          code: 'BIZ301',
          department: 'Business Management',
          semester: 3,
          section: 'A',
          faculty: 'Dr. Gupta',
          weeklyHours: 2,
          expectedSize: 25,
          type: 'practical',
          isActive: true,
        },
      ];

    setCourses(deptCourses);

    // Generate weekly slots for both department and university resources
    generateWeeklySlots(deptResources, universityResources);
  }, [currentHOD]);

  const generateWeeklySlots = (deptResources: Resource[], uniResources: Resource[]) => {
    const deptSlots: WeeklyTimeSlot[] = [];
    const uniSlots: WeeklyTimeSlot[] = [];
    
    // Generate department resource slots
    deptResources.forEach(resource => {
      DEFAULT_TIME_SLOTS.forEach(timeSlot => {
        [1, 2, 3, 4, 5].forEach(day => {
          deptSlots.push({
            id: `dept_slot_${resource.id}_${timeSlot.id}_${day}`,
            resourceId: resource.id,
            timeSlotId: timeSlot.id,
            dayOfWeek: day,
            isOccupied: false,
            bookingDate: new Date().toISOString(),
          });
        });
      });
    });

    // Generate university resource slots with some sample bookings
    uniResources.forEach(resource => {
      DEFAULT_TIME_SLOTS.forEach(timeSlot => {
        [1, 2, 3, 4, 5].forEach(day => {
          const isOccupied = Math.random() < 0.3; // 30% occupied
          uniSlots.push({
            id: `uni_slot_${resource.id}_${timeSlot.id}_${day}`,
            resourceId: resource.id,
            timeSlotId: timeSlot.id,
            dayOfWeek: day,
            isOccupied,
            occupiedBy: isOccupied ? {
              courseId: `course_${Math.floor(Math.random() * 100)}`,
              courseName: ['Physics Lab', 'Chemistry Practical', 'Department Meeting', 'Guest Lecture', 'Workshop'][Math.floor(Math.random() * 5)],
              department: ['Physics', 'Chemistry', 'Mathematics', 'Biology', 'Computer Science'][Math.floor(Math.random() * 5)],
              faculty: ['Dr. Smith', 'Prof. Johnson', 'Dr. Williams', 'Prof. Brown'][Math.floor(Math.random() * 4)],
              classSize: Math.floor(Math.random() * 50) + 20,
            } : undefined,
            bookingDate: new Date().toISOString(),
          });
        });
      });
    });
    
    setDepartmentSlots(deptSlots);
    setUniversitySlots(uniSlots);
  };

  const getSlotForResource = (slots: WeeklyTimeSlot[], resourceId: string, timeSlotId: string, day: number) => {
    return slots.find(slot => 
      slot.resourceId === resourceId && 
      slot.timeSlotId === timeSlotId && 
      slot.dayOfWeek === day
    );
  };

  const getSessionForSlot = (resourceId: string, timeSlotId: string, day: number) => {
    return classSessions.find(session =>
      session.resourceId === resourceId &&
      session.timeSlotId === timeSlotId &&
      session.dayOfWeek === day
    );
  };

  const handleBookingRequest = () => {
    if (!selectedResourceForBooking || !currentHOD) return;

    const newRequest: BookingRequest = {
      id: `request_${Date.now()}`,
      requesterId: currentHOD.id,
      requesterDepartment: currentHOD.department,
      targetResourceId: selectedResourceForBooking.id,
      targetDepartment: selectedResourceForBooking.department,
      timeSlotId: bookingForm.timeSlotId,
      dayOfWeek: selectedDay,
      courseName: bookingForm.courseName,
      purpose: bookingForm.purpose,
      expectedAttendance: parseInt(bookingForm.expectedAttendance),
      requestDate: new Date().toISOString(),
      status: 'pending',
    };

    setBookingRequests(prev => [...prev, newRequest]);
    setBookingDialogOpen(false);
    setSelectedResourceForBooking(null);
    setBookingForm({
      timeSlotId: '',
      courseName: '',
      purpose: '',
      expectedAttendance: '',
    });
  };

  const handleAllocateSlot = () => {
    if (!selectedSlotForAllocation || !allocationForm.courseId) return;

    const newSession: ClassSession = {
      id: `session_${Date.now()}`,
      courseId: allocationForm.courseId,
      resourceId: selectedSlotForAllocation.resourceId,
      timeSlotId: selectedSlotForAllocation.timeSlotId,
      dayOfWeek: selectedSlotForAllocation.dayOfWeek,
      faculty: allocationForm.faculty,
      type: allocationForm.type,
    };

    setClassSessions(prev => [...prev, newSession]);
    
    // Update department slot to mark as occupied
    setDepartmentSlots(prev => prev.map(slot => {
      if (slot.resourceId === selectedSlotForAllocation.resourceId &&
          slot.timeSlotId === selectedSlotForAllocation.timeSlotId &&
          slot.dayOfWeek === selectedSlotForAllocation.dayOfWeek) {
        const course = courses.find(c => c.id === allocationForm.courseId);
        return {
          ...slot,
          isOccupied: true,
          occupiedBy: {
            courseId: allocationForm.courseId,
            courseName: course?.name || '',
            department: currentHOD?.department || '',
            faculty: allocationForm.faculty,
            classSize: course?.expectedSize || 0,
          }
        };
      }
      return slot;
    }));

    setAllocationDialogOpen(false);
    setSelectedSlotForAllocation(null);
    setAllocationForm({
      courseId: '',
      faculty: '',
      type: 'theory',
    });
    setConflicts([]);
  };

  const handleRemoveAllocation = (session: ClassSession) => {
    setClassSessions(prev => prev.filter(s => s.id !== session.id));
    
    // Update department slot to mark as vacant
    setDepartmentSlots(prev => prev.map(slot => {
      if (slot.resourceId === session.resourceId &&
          slot.timeSlotId === session.timeSlotId &&
          slot.dayOfWeek === session.dayOfWeek) {
        return {
          ...slot,
          isOccupied: false,
          occupiedBy: undefined,
        };
      }
      return slot;
    }));
  };

  const openBookingDialog = (resource: Resource, timeSlotId: string) => {
    setSelectedResourceForBooking(resource);
    setBookingForm(prev => ({ ...prev, timeSlotId }));
    setBookingDialogOpen(true);
  };

  const openAllocationDialog = (resourceId: string, timeSlotId: string, dayOfWeek: number) => {
    setSelectedSlotForAllocation({ resourceId, timeSlotId, dayOfWeek });
    setAllocationDialogOpen(true);
    setConflicts([]);
  };

  const getStatusColor = (isOccupied: boolean) => {
    return isOccupied ? 'bg-red-100 text-red-700 border-red-200' : 'bg-green-100 text-green-700 border-green-200';
  };

  const getResourceTypeIcon = (type: Resource['type']) => {
    switch (type) {
      case 'seminar_hall':
        return <Building2 className="h-4 w-4" />;
      case 'conference_room':
        return <Users className="h-4 w-4" />;
      case 'lab':
        return <Building2 className="h-4 w-4" />;
      default:
        return <Building2 className="h-4 w-4" />;
    }
  };

  const autoGenerateRoutine = () => {
    // Clear existing sessions
    setClassSessions([]);
    setDepartmentSlots(prev => prev.map(slot => ({
      ...slot,
      isOccupied: false,
      occupiedBy: undefined,
    })));

    const newSessions: ClassSession[] = [];
    const usedSlots = new Set<string>();

    courses.forEach(course => {
      const sessionsNeeded = course.weeklyHours;
      let sessionsScheduled = 0;

      // Try to schedule sessions for this course
      for (let day = 1; day <= 5 && sessionsScheduled < sessionsNeeded; day++) {
        for (let timeSlotIndex = 0; timeSlotIndex < DEFAULT_TIME_SLOTS.length && sessionsScheduled < sessionsNeeded; timeSlotIndex++) {
          const timeSlot = DEFAULT_TIME_SLOTS[timeSlotIndex];
          
          // Find suitable resource
          const suitableResource = departmentResources.find(resource => {
            const slotKey = `${resource.id}_${timeSlot.id}_${day}`;
            const isResourceFree = !usedSlots.has(slotKey);
            const hasCapacity = resource.capacity >= course.expectedSize;
            const isRightType = (course.type === 'practical' && resource.type === 'lab') ||
                              (course.type === 'theory' && (resource.type === 'classroom' || resource.type === 'seminar_hall'));
            
            return isResourceFree && hasCapacity && isRightType;
          });

          if (suitableResource) {
            const session: ClassSession = {
              id: `auto_session_${Date.now()}_${sessionsScheduled}`,
              courseId: course.id,
              resourceId: suitableResource.id,
              timeSlotId: timeSlot.id,
              dayOfWeek: day,
              faculty: course.faculty,
              type: course.type,
            };

            newSessions.push(session);
            usedSlots.add(`${suitableResource.id}_${timeSlot.id}_${day}`);
            sessionsScheduled++;
          }
        }
      }
    });

    setClassSessions(newSessions);

    // Update department slots
    setDepartmentSlots(prev => prev.map(slot => {
      const session = newSessions.find(s =>
        s.resourceId === slot.resourceId &&
        s.timeSlotId === slot.timeSlotId &&
        s.dayOfWeek === slot.dayOfWeek
      );

      if (session) {
        const course = courses.find(c => c.id === session.courseId);
        return {
          ...slot,
          isOccupied: true,
          occupiedBy: {
            courseId: session.courseId,
            courseName: course?.name || '',
            department: currentHOD?.department || '',
            faculty: session.faculty,
            classSize: course?.expectedSize || 0,
          }
        };
      }

      return {
        ...slot,
        isOccupied: false,
        occupiedBy: undefined,
      };
    }));
  };

  return (
    <div className="space-y-6">
      {loading && (
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-500"></div>
        </div>
      )}

      {error && (
        <Alert variant="destructive" className="mb-6">
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {!loading && !error && (
      <div>
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-slate-900">Resource Management</h1>
            <p className="text-slate-600 mt-1">Manage department and university resources</p>
          </div>
        <div className="flex items-center space-x-3">
          <Button
            onClick={autoGenerateRoutine}
            className="bg-purple-600 hover:bg-purple-700"
          >
            <Wand2 className="h-4 w-4 mr-2" />
            Auto-Generate Routine
          </Button>
          <Select value={selectedDay.toString()} onValueChange={(value) => setSelectedDay(parseInt(value))}>
            <SelectTrigger className="w-40">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              {DAYS.slice(1, 6).map((day, index) => (
                <SelectItem key={index + 1} value={(index + 1).toString()}>
                  {day}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      </div>

      {/* Resources Tabs */}
      <Tabs defaultValue="department" className="space-y-6">
        <TabsList className="grid w-full grid-cols-2 bg-white/80 backdrop-blur-sm">
          <TabsTrigger
            value="department"
            className="data-[state=active]:bg-indigo-500 data-[state=active]:text-white"
          >
            <Building2 className="h-4 w-4 mr-2" />
            Department Resources
          </TabsTrigger>
          <TabsTrigger
            value="university"
            className="data-[state=active]:bg-indigo-500 data-[state=active]:text-white"
          >
            <Globe className="h-4 w-4 mr-2" />
            University Resources
          </TabsTrigger>
        </TabsList>

        {/* Department Resources Tab */}
        <TabsContent value="department" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Building2 className="h-5 w-5 mr-2" />
                {currentHOD?.department} Resources - {DAYS[selectedDay]} Schedule
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                {departmentResources.map(resource => (
                  <div key={resource.id} className="border rounded-lg p-4">
                    <div className="flex items-center justify-between mb-4">
                      <div className="flex items-center space-x-3">
                        {getResourceTypeIcon(resource.type)}
                        <div>
                          <h3 className="font-semibold">{resource.name}</h3>
                          <p className="text-sm text-slate-600">
                            Capacity: {resource.capacity} • {resource.type.replace('_', ' ')}
                          </p>
                        </div>
                      </div>
                      <Badge variant="outline">
                        {resource.location}
                      </Badge>
                    </div>

                    <div className="grid grid-cols-6 gap-2">
                      {DEFAULT_TIME_SLOTS.map(timeSlot => {
                        const slot = getSlotForResource(departmentSlots, resource.id, timeSlot.id, selectedDay);
                        const session = getSessionForSlot(resource.id, timeSlot.id, selectedDay);

                        return (
                          <div
                            key={timeSlot.id}
                            className={`p-3 rounded-lg border text-center cursor-pointer transition-all ${
                              slot?.isOccupied 
                                ? 'bg-blue-100 text-blue-700 border-blue-200 hover:bg-blue-200' 
                                : 'bg-green-50 text-green-700 border-green-200 hover:bg-green-100'
                            }`}
                            onClick={() => {
                              if (slot?.isOccupied && session) {
                                if (confirm('Remove this class allocation?')) {
                                  handleRemoveAllocation(session);
                                }
                              } else {
                                openAllocationDialog(resource.id, timeSlot.id, selectedDay);
                              }
                            }}
                          >
                            <div className="font-medium text-xs">{timeSlot.label}</div>
                            {slot?.isOccupied && slot.occupiedBy ? (
                              <div className="mt-2 space-y-1">
                                <div className="text-xs font-medium">{slot.occupiedBy.courseName}</div>
                                <div className="text-xs">{slot.occupiedBy.faculty}</div>
                                <div className="text-xs">
                                  Occupied by {currentHOD?.department}
                                </div>
                              </div>
                            ) : (
                              <div className="mt-2 text-xs">
                                <Plus className="h-3 w-3 mx-auto mb-1" />
                                Available
                              </div>
                            )}
                          </div>
                        );
                      })}
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* University Resources Tab */}
        <TabsContent value="university" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 mb-6">
            {universityResources.map((resource) => (
              <Card 
                key={resource.id} 
                className="cursor-pointer transition-all hover:shadow-lg"
              >
                <CardHeader className="pb-3">
                  <div className="flex items-start justify-between">
                    <div className="flex items-center space-x-2">
                      {getResourceTypeIcon(resource.type)}
                      <CardTitle className="text-lg">{resource.name}</CardTitle>
                    </div>
                    <Badge variant="outline" className="text-xs">
                      {resource.type.replace('_', ' ')}
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div className="flex items-center text-sm text-slate-600">
                    <Users className="h-4 w-4 mr-2" />
                    Capacity: {resource.capacity}
                  </div>
                  
                  {resource.location && (
                    <div className="flex items-center text-sm text-slate-600">
                      <MapPin className="h-4 w-4 mr-2" />
                      {resource.location}
                    </div>
                  )}

                  {resource.facilities && resource.facilities.length > 0 && (
                    <div>
                      <div className="text-xs font-medium text-slate-700 mb-1">Facilities:</div>
                      <div className="flex flex-wrap gap-1">
                        {resource.facilities.slice(0, 3).map((facility, index) => (
                          <Badge key={index} variant="secondary" className="text-xs">
                            {facility}
                          </Badge>
                        ))}
                        {resource.facilities.length > 3 && (
                          <Badge variant="secondary" className="text-xs">
                            +{resource.facilities.length - 3} more
                          </Badge>
                        )}
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>
            ))}
          </div>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Calendar className="h-5 w-5 mr-2" />
                University Resources - {DAYS[selectedDay]} Schedule
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                {universityResources.map(resource => (
                  <div key={resource.id} className="border rounded-lg p-4">
                    <div className="flex items-center justify-between mb-4">
                      <div className="flex items-center space-x-3">
                        {getResourceTypeIcon(resource.type)}
                        <div>
                          <h3 className="font-semibold">{resource.name}</h3>
                          <p className="text-sm text-slate-600">
                            Capacity: {resource.capacity} • {resource.type.replace('_', ' ')}
                          </p>
                        </div>
                      </div>
                      <Badge variant="outline">
                        Shared Resource
                      </Badge>
                    </div>

                    <div className="grid grid-cols-6 gap-2">
                      {DEFAULT_TIME_SLOTS.map(timeSlot => {
                        const slot = getSlotForResource(universitySlots, resource.id, timeSlot.id, selectedDay);

                        return (
                          <div
                            key={timeSlot.id}
                            className={`p-3 rounded-lg border text-center cursor-pointer transition-all ${getStatusColor(slot?.isOccupied || false)}`}
                            onClick={() => {
                              if (!slot?.isOccupied) {
                                openBookingDialog(resource, timeSlot.id);
                              }
                            }}
                          >
                            <div className="font-medium text-xs">{timeSlot.label}</div>
                            {slot?.isOccupied && slot.occupiedBy ? (
                              <div className="mt-2 space-y-1">
                                <div className="text-xs font-medium">{slot.occupiedBy.courseName}</div>
                                <div className="text-xs">{slot.occupiedBy.faculty}</div>
                                <div className="text-xs">
                                  Booked by {slot.occupiedBy.department}
                                </div>
                              </div>
                            ) : (
                              <div className="mt-2 text-xs">
                                <Send className="h-3 w-3 mx-auto mb-1" />
                                Request
                              </div>
                            )}
                          </div>
                        );
                      })}
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Booking Request Dialog */}
      <Dialog open={bookingDialogOpen} onOpenChange={setBookingDialogOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Request Resource Booking</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            {selectedResourceForBooking && (
              <>
                <div>
                  <Label>Resource</Label>
                  <Input value={selectedResourceForBooking.name} disabled />
                </div>
                
                <div>
                  <Label>Day</Label>
                  <Input value={DAYS[selectedDay]} disabled />
                </div>
                
                <div>
                  <Label>Time Slot</Label>
                  <Input value={DEFAULT_TIME_SLOTS.find(t => t.id === bookingForm.timeSlotId)?.label || ''} disabled />
                </div>
              </>
            )}
            
            <div>
              <Label htmlFor="courseName">Course/Event Name *</Label>
              <Input
                id="courseName"
                value={bookingForm.courseName}
                onChange={(e) => setBookingForm(prev => ({ ...prev, courseName: e.target.value }))}
                placeholder="Enter course or event name"
              />
            </div>
            
            <div>
              <Label htmlFor="expectedAttendance">Expected Attendance *</Label>
              <Input
                id="expectedAttendance"
                type="number"
                value={bookingForm.expectedAttendance}
                onChange={(e) => setBookingForm(prev => ({ ...prev, expectedAttendance: e.target.value }))}
                placeholder="Number of attendees"
                max={selectedResourceForBooking?.capacity}
              />
            </div>
            
            <div>
              <Label htmlFor="purpose">Purpose (Optional)</Label>
              <Textarea
                id="purpose"
                value={bookingForm.purpose}
                onChange={(e) => setBookingForm(prev => ({ ...prev, purpose: e.target.value }))}
                placeholder="Additional details about the booking"
                rows={3}
              />
            </div>
            
            <div className="flex space-x-3">
              <Button 
                onClick={handleBookingRequest}
                disabled={!bookingForm.courseName || !bookingForm.expectedAttendance}
                className="flex-1"
              >
                Send Request
              </Button>
              <Button 
                variant="outline" 
                onClick={() => setBookingDialogOpen(false)}
                className="flex-1"
              >
                Cancel
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Allocation Dialog */}
      <Dialog open={allocationDialogOpen} onOpenChange={setAllocationDialogOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Allocate Time Slot</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            {selectedSlotForAllocation && (
              <>
                <div>
                  <Label>Resource</Label>
                  <Input 
                    value={departmentResources.find(r => r.id === selectedSlotForAllocation.resourceId)?.name || ''} 
                    disabled 
                  />
                </div>
                
                <div>
                  <Label>Time Slot</Label>
                  <Input 
                    value={`${DAYS[selectedSlotForAllocation.dayOfWeek]} • ${DEFAULT_TIME_SLOTS.find(t => t.id === selectedSlotForAllocation.timeSlotId)?.label}`} 
                    disabled 
                  />
                </div>
              </>
            )}
            
            <div>
              <Label htmlFor="course">Course *</Label>
              <Select value={allocationForm.courseId} onValueChange={(value) => 
                setAllocationForm(prev => ({ ...prev, courseId: value }))
              }>
                <SelectTrigger>
                  <SelectValue placeholder="Select course" />
                </SelectTrigger>
                <SelectContent>
                  {courses.map(course => (
                    <SelectItem key={course.id} value={course.id}>
                      {course.name} ({course.code}) - {course.faculty}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div>
              <Label htmlFor="faculty">Faculty *</Label>
              <Input
                id="faculty"
                value={allocationForm.faculty}
                onChange={(e) => setAllocationForm(prev => ({ ...prev, faculty: e.target.value }))}
                placeholder="Enter faculty name"
              />
            </div>
            
            <div>
              <Label htmlFor="type">Class Type *</Label>
              <Select value={allocationForm.type} onValueChange={(value: any) => 
                setAllocationForm(prev => ({ ...prev, type: value }))
              }>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="theory">Theory</SelectItem>
                  <SelectItem value="practical">Practical</SelectItem>
                  <SelectItem value="tutorial">Tutorial</SelectItem>
                  <SelectItem value="seminar">Seminar</SelectItem>
                </SelectContent>
              </Select>
            </div>

            {conflicts.length > 0 && (
              <Alert variant="destructive">
                <AlertTriangle className="h-4 w-4" />
                <AlertDescription>
                  <div className="space-y-1">
                    {conflicts.map((conflict, index) => (
                      <div key={index}>{conflict}</div>
                    ))}
                  </div>
                </AlertDescription>
              </Alert>
            )}
            
            <div className="flex space-x-3">
              <Button 
                onClick={handleAllocateSlot}
                disabled={!allocationForm.courseId || !allocationForm.faculty}
                className="flex-1"
              >
                <Save className="h-4 w-4 mr-2" />
                Allocate
              </Button>
              <Button 
                variant="outline" 
                onClick={() => setAllocationDialogOpen(false)}
                className="flex-1"
              >
                Cancel
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}
